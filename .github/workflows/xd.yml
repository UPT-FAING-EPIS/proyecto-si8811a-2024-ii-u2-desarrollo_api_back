name: Automate Package Versioning and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Solo cuando se haga un push con un tag que siga el formato sem치ntico

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Checkout del c칩digo
    - name: Checkout code
      uses: actions/checkout@v3

    # Paso 2: Generar changelog de los commits entre versiones
    - name: Generate Changelog
      id: changelog
      run: |
        echo "**Changelog**" > changelog.txt
        echo "- Cambios recientes en esta versi칩n:" >> changelog.txt
        git log --oneline $(git describe --tags --abbrev=0)..HEAD >> changelog.txt
        cat changelog.txt

    # Paso 3: Crear release en GitHub
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: ${{ steps.changelog.outputs.changelog || 'No se generaron cambios autom치ticamente.' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Paso 4: Construir el artefacto (paquete) del proyecto
    - name: Build Artifact
      run: |
        mkdir -p build
        echo "Contenido de ejemplo para el release" > build/artifact.txt
        zip -r build/artifact.zip build/

    # Paso 5: Subir artefacto (paquete) al release
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/artifact.zip
        asset_name: artifact.zip
        asset_content_type: application/zip

    # Paso 6: Notificar sobre el release (opcional)
    - name: Notify Release
      run: |
        echo "Release creado exitosamente: ${{ github.ref_name }}"
